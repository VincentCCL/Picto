####### PictoToText.pl ##########

# By Leen Sevens and Vincent Vandeghinste
# leen@ccl.kuleuven.be and vincent@ccl.kuleuven.be
# Date: 03.11.2014

#---------------------------------------

# This script tries to form text generated by selecting pictos or mixed input into natural language text
# Example: perl PictoToText.pl -p beta -s cornetto 'ik zijn_ww blij'

#---------------------------------------

# Takes the following obligatory input options:

# -p sclera|beta sets the pictograph set used in the output
# -s cornetto sets the source language/database

#---------------------------------------

# Takes the following optional input options (systems's parameters, which were tuned beforehand):
# See also: Sevens L., Vandeghinste V., Schuurman I., Van Eynde F. (2015). Natural Language Generation from Pictographs. In Belz, A. (Ed.), Gatt, A. (Ed.), Portet, F. (Ed.), Purver, M. (Ed.), Proceedings of the 15th European Workshop on Natural Language Generation (ENLG). European Workshop on Natural Language Generation. Brighton, UK, 10-11 September 2015 (pp. 71-75) Association for Computational Linguistics.

# -t sets the Threshold Pruning
# -d sets the Time Out
# -h sets the Histogram Pruning
# -c sets the Cost Estime
# -r sets the Reverse Lemmatizer

#---------------------------------------

# Takes the following optional input options (location of the picto database and the language model database):

# -g sets the picto database name
# -j sets the picto database host
# -m sets the picto database port
# -u sets the picto database user
# -q sets the picto database password
# -a sets the language model database name
# -b sets the language model database host
# -e sets the language model database port
# -f sets the language model database user
# -i sets the language model database password

#---------------------------------------

getopt("abcdefghijmpqrstu",\%opts);
unless ($pictolanguage=$opts{p}) {
    print STDERR "Use -p option to set picto language (sclera/beta)\n";
}
unless ($naturallanguage=$opts{s}) {
    print STDERR "Use -s option to set natural language (cornetto)\n";
}
unless (defined($thresholdpruning=$opts{t})) {
    if(($naturallanguage eq "cornetto") & ($pictolanguage eq "beta")){
 	    $thresholdpruning=4;
	    print STDERR "Use -t option to set threshold pruning (default=$thresholdpruning)\n";
    }
    elsif(($naturallanguage eq "cornetto") & ($pictolanguage eq "sclera")){
 	    $thresholdpruning=3;
	    print STDERR "Use -t option to set threshold pruning (default=$thresholdpruning)\n";
    }
}
unless ($histopruning=$opts{h}) {
    if(($naturallanguage eq "cornetto") & ($pictolanguage eq "beta")){
 	    $histopruning=12;
	    print STDERR "Use -h option to set histo pruning (default=$histopruning)\n";
    }
    elsif(($naturallanguage eq "cornetto") & ($pictolanguage eq "sclera")){
            $histopruning=4;
	    print STDERR "Use -h option to set histo pruning (default=$histopruning)\n";
    }
}
unless (defined($cost_estimate=$opts{c})) {
    if(($naturallanguage eq "cornetto") & ($pictolanguage eq "beta")){
 	    $cost_estimate=2;
	    print STDERR "Use -c option to set cost estimate (default=$cost_estimate)\n";
    }
    elsif(($naturallanguage eq "cornetto") & ($pictolanguage eq "sclera")){
            $cost_estimate=2;
	    print STDERR "Use -c option to set cost estimate (default=$cost_estimate)\n";
    }
}
unless ($extend_die=$opts{d}) {
    print STDERR "Use -d option to set time out (die after n extensions, default=3500)\n";
    $extend_die=3500;
}
unless ($revlemmatizer=$opts{r}) {
   if(($naturallanguage eq "cornetto") & ($pictolanguage eq "beta")){
 	    $revlemmatizer="$Bin/../data/revlemmas.sonar21.db";
	    print STDERR "Use -r option to set reverse lemmatizer\n";
   }
   elsif(($naturallanguage eq "cornetto") & ($pictolanguage eq "sclera")){
            $revlemmatizer="$Bin/../data/revlemmas.sonar36.db";
	    print STDERR "Use -r option to set reverse lemmatizer\n";
   }
}
tie %REVLEMMAS,"DB_File",$revlemmatizer;
unless (defined($database=$opts{g})) {
    $database="cornetto2";
    print STDERR "Use -g option to set picto database name (default=$database)\n";
}
unless (defined($host=$opts{j})) {
    $host="gobelijn";
    print STDERR "Use -j option to set picto database host (default=$host)\n";
}
unless (defined($port=$opts{m})) {
    $port="5432";
    print STDERR "Use -m option to set picto database port (default=$port)\n";
}
unless (defined($user=$opts{u})) {
    $user="vincent";
    print STDERR "Use -u option to set picto database user (default=$user)\n";
}
unless (defined($pwd=$opts{q})) {
    $pwd="vincent";
    print STDERR "Use -q option to set picto database password (default=$pwd)\n";
}
unless (defined($lmdatabase=$opts{a})) {
    $lmdatabase="dutch_lm_large";
    print STDERR "Use -a option to set language model database name (default=$lmdatabase)\n";
}
unless (defined($lmhost=$opts{b})) {
    $lmhost="gobelijn";
    print STDERR "Use -b option to set language model database host (default=$lmhost)\n";
}
unless (defined($lmport=$opts{e})) {
    $lmport="5432";
    print STDERR "Use -e option to set language model database port (default=$lmport)\n";
}
unless (defined($lmuser=$opts{f})) {
    $lmuser="vincent";
    print STDERR "Use -f option to set language model database user (default=$lmuser)\n";
}
unless (defined($lmpwd=$opts{i})) {
    $lmpwd="vincent";
    print STDERR "Use -i option to set language model database password (default=$lmpwd)\n";
}
$condition='tok';

#---------------------------------------

# Libraries

use Getopt::Std;  
use FindBin qw($Bin); 
use DB_File;
require "$Bin/object.pm";
require "$Bin/Database.pm";
require "$Bin/synset.pm";
require "$Bin/synset_$naturallanguage.pm";
require "$Bin/picto.pm";
require "$Bin/LanguageModeling_$naturallanguage.pm";
require "$Bin/languagemodeling_5gram.pm";
require "$Bin/simplifybackup.pm";

#---------------------------------------

# Main program

$in=shift(@ARGV);
$message=message->new(text,$in,
		      logfile,\*LOG,
		      target,$pictolanguage,
		      nl,$naturallanguage,
		      condition,$condition);
$message->openWordnet;
$message->tokenize;
$message->detectSentences;
$message->generateProperText;
